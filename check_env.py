#!/usr/bin/env python3
"""
üîç CURSOR ENVIRONMENT CONNECTIVITY CHECKER
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–≤—è–∑–Ω–æ—Å—Ç—å GitHub ‚Üî Cursor ‚Üî Ollama ‚Üî RAG
"""

import subprocess
import sys
import json
import requests
from pathlib import Path

def run_command(cmd, shell=True):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–º–∞–Ω–¥—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç"""
    try:
        result = subprocess.run(cmd, shell=shell, capture_output=True, text=True, timeout=10)
        return result.returncode == 0, result.stdout.strip(), result.stderr.strip()
    except subprocess.TimeoutExpired:
        return False, "", "Timeout"
    except Exception as e:
        return False, "", str(e)

def check_git():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç Git –∏ GitHub –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ"""
    print("1Ô∏è‚É£ GITHUB CONNECTION")
    print("-------------------")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º git remote
    success, output, error = run_command("git remote -v")
    if success and "github.com" in output:
        print("‚úÖ GitHub remote configured")
        print(f"   {output}")
    else:
        print("‚ùå No GitHub remote found")
        print(f"   Error: {error}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
    success, output, error = run_command("git status --porcelain")
    if success:
        if output:
            print("‚ö†Ô∏è  Uncommitted changes detected")
            print(f"   {output}")
        else:
            print("‚úÖ Working directory clean")
    else:
        print("‚ùå Git status check failed")
    
    print()

def check_ollama():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç Ollama runtime"""
    print("2Ô∏è‚É£ OLLAMA RUNTIME")
    print("-----------------")
    
    try:
        response = requests.get("http://localhost:11434", timeout=5)
        if response.status_code == 200:
            print("‚úÖ Ollama is running")
            print(f"   Response: {response.text}")
        else:
            print(f"‚ùå Ollama responded with status {response.status_code}")
    except requests.exceptions.RequestException as e:
        print("‚ùå Ollama not accessible")
        print(f"   Error: {e}")
        print("   üí° Start Ollama: ollama serve")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–æ–¥–µ–ª–∏
    try:
        response = requests.get("http://localhost:11434/api/tags", timeout=5)
        if response.status_code == 200:
            data = response.json()
            if data.get('models'):
                print("‚úÖ Available models:")
                for model in data['models']:
                    print(f"   - {model['name']}")
            else:
                print("‚ö†Ô∏è  No models found")
                print("   üí° Pull a model: ollama pull deepseek-coder")
        else:
            print("‚ùå Cannot list models")
    except requests.exceptions.RequestException as e:
        print("‚ùå Cannot list models")
        print(f"   Error: {e}")
    
    print()

def check_python():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç Python –æ–∫—Ä—É–∂–µ–Ω–∏–µ"""
    print("3Ô∏è‚É£ PYTHON ENVIRONMENT")
    print("---------------------")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º Python
    success, output, error = run_command("python --version")
    if success:
        print(f"‚úÖ Python available: {output}")
    else:
        print("‚ùå Python not found")
        print(f"   Error: {error}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞–∫–µ—Ç—ã
    required_packages = ["chromadb", "langchain", "fastapi", "uvicorn"]
    for package in required_packages:
        success, output, error = run_command(f"pip show {package}")
        if success and "Version:" in output:
            version = [line for line in output.split('\n') if line.startswith('Version:')][0].split(':')[1].strip()
            print(f"‚úÖ {package} v{version}")
        else:
            print(f"‚ùå {package} not installed")
    
    print()

def check_rag():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç RAG —Å–µ—Ä–≤–∏—Å"""
    print("4Ô∏è‚É£ RAG SERVICE")
    print("--------------")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∫—Ä–∏–ø—Ç—ã
    scripts = ["index_codebase.py", "ask_rag.py"]
    for script in scripts:
        if Path(script).exists():
            print(f"‚úÖ {script} found")
        else:
            print(f"‚ùå {script} missing")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    if Path("chroma_db").exists():
        print("‚úÖ ChromaDB database exists")
    else:
        print("‚ö†Ô∏è  ChromaDB database not found")
        print("   üí° Run: python index_codebase.py")
    
    print()

def check_cursor_config():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é Cursor"""
    print("5Ô∏è‚É£ CURSOR INTEGRATION")
    print("---------------------")
    
    if Path("cursor_config.json").exists():
        print("‚úÖ Cursor config file found")
        try:
            with open("cursor_config.json", 'r') as f:
                config = json.load(f)
                print("‚úÖ Config file is valid JSON")
        except json.JSONDecodeError as e:
            print(f"‚ùå Config file has invalid JSON: {e}")
    else:
        print("‚ùå Cursor config file missing")
    
    print("‚ÑπÔ∏è  Manual steps required:")
    print("   1. Cursor Settings ‚Üí AI Models ‚Üí Add Custom Model")
    print("      Provider: OpenAI")
    print("      Base URL: http://localhost:11434/v1")
    print("      API Key: ollama")
    print("")
    print("   2. Cursor Settings ‚Üí MCP Servers ‚Üí Add Server")
    print("      Name: local_rag")
    print("      Command: python")
    print("      Args: ask_rag.py")
    
    print()

def main():
    print("üîç CURSOR ENVIRONMENT CONNECTIVITY CHECKER")
    print("===============================================")
    print()
    
    check_git()
    check_ollama()
    check_python()
    check_rag()
    check_cursor_config()
    
    print("6Ô∏è‚É£ SUMMARY")
    print("----------")
    
    issues = 0
    if not Path("index_codebase.py").exists():
        issues += 1
    if not Path("ask_rag.py").exists():
        issues += 1
    if not Path("chroma_db").exists():
        issues += 1
    
    if issues == 0:
        print("üéâ All systems ready for Cursor integration!")
    else:
        print(f"‚ö†Ô∏è  {issues} issues found - see recommendations above")
    
    print()
    print("üí° Next steps:")
    print("   1. Fix any issues above")
    print("   2. Configure Cursor AI models")
    print("   3. Set up MCP servers")
    print("   4. Test with: @local_rag search your query")

if __name__ == "__main__":
    main()
